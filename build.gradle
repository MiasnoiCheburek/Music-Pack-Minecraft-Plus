plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.+'
    id 'idea'
    id 'java'
    id 'java-library'
}

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(22))

//only pull dependencies that are guaranteed to exist in all modules and should be included in the build
def excluded = [ til_repo, 'com.google.code.gson', 'com.google.guava', 'com.moandjiezana.toml', 'curse.maven',
                 'net.darkhax.bookshelf', 'net.darkhax.gamestages', 'net.minecraftforge', 'org.joml', 'org.ow2.asm' ]

dependencies {
    shadow(project(':legacy:legacy.1_12')) { excluded.forEach { grp -> { exclude group: grp } } }
    shadow(project(':forge:forge.1_16')) { excluded.forEach { grp -> { exclude group: grp } } }
}

shadowJar {
    //relocate shaded dependencies to the shadow package to prevent library conflicts
    [ 'certificates', 'com.sedmelluq.discord.lavaplayer', 'com.sedmelluq.lava.common', 'com.sedmelluq.lava.extensions',
      'com.sedmelluq.lava.player', 'com.sedmelluq.lavaplayer.extensions', 'com.rits.cloning', 'com.rits.perspectives',
      'mozilla', 'net.sourceforge.jaad.aac', 'org.apache.http.auth', 'org.apache.http.client', 'org.apache.http.conn',
      'org.apache.http.cookie', 'org.apache.http.impl.auth', 'org.apache.http.impl.client', 'org.apache.http.impl.conn',
      'org.apache.http.impl.cookie', 'org.apache.http.impl.execchain', 'org.mozilla.classfile',
      'org.mozilla.javascript', 'org.slf4j' ].forEach { pkg -> { relocate pkg, "${shadow_package}.${pkg}" } }
    configurations = [project.configurations.shadow]
    setArchiveClassifier('')
    exclude 'module-info.*'
}

jar {
    manifest {
        attributes([ //TODO Figure out how to automatically combine this with the submodules
                'TILMultiversionMods': mod_entrypoint
        ])
    }
}

tasks.assemble.dependsOn('shadowJar')

allprojects {
    plugins.apply('java')

    group = base_package
    version = mod_version

    repositories { //TODO Add content filters?
        mavenCentral()
        maven {
            name = 'JitPack'
            url = uri('https://jitpack.io')
        }
        maven {
            name = 'M2'
            url = uri('https://m2.dv8tion.net/releases')
        }
        flatDir {
            dirs "$rootProject.projectDir/libs"
        }
    }

    java {
        archivesBaseName = mod_id
    }

    tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }
}

subprojects {
    plugins.apply('idea')
    plugins.apply('java')
    plugins.apply('java-library')

    dependencies {
        //lombok
        annotationProcessor("org.projectlombok:lombok:${lombok_version}")
        compileOnly("org.projectlombok:lombok:${lombok_version}")

        //lavaplayer base
        implementation("com.github.walkyst:lavaplayer-fork:${lava_version}") { transitive = false }

        //lavaplayer dependencies
        implementation("${walkyst_repo}.JAADec-fork:jaadec-ext-aac:${jaadec_version}") { transitive = false }
        implementation("${walkyst_repo}:lavaplayer-natives-fork:${lava_natives_version}") { transitive = false }
        implementation("${lava_repo}:lava-common:${lava_version}") { transitive = false }
        implementation("${lava_repo}:lavaplayer:${lava_version}") { transitive = false }
        implementation("${lava_repo}:lavaplayer-ext-format-xm:${lava_version}") { transitive = false }
        implementation("${lava_repo}:lavaplayer-ext-youtube-rotator:${lava_version}") { transitive = false }
        implementation("${lava_repo}:lavaplayer-stream-merger:${lava_version}") { transitive = false }
        implementation("${lava_repo}:lavaplayer-test-samples:${lava_version}") { transitive = false }
        implementation("org.apache.httpcomponents:httpclient:${http_version}") { transitive = false }
        implementation("org.mozilla:rhino:${rhino_version}") { transitive = false }
        implementation("org.mozilla:rhino-engine:${rhino_version}") { transitive = false }
        implementation("org.slf4j:slf4j-api:${slf4j_version}") { transitive = false }

        //other shaded
        implementation("io.github.kostaskougios:cloning:${cloning_version}") { transitive = false }

        //required
        implementation("${til_repo}:theimpossiblelibrary:${til_version}") //uses a repo var for local testing
    }
}