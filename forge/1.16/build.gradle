buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.github.johnrengelman', 'com.google.code.findbugs', 'com.google.code.gson',
                  'com.google.errorprone', 'com.google.guava', 'com.google.j2objc',
                  'com.machinezoo.noexception', 'commons-codec', 'commons-io',
                  'commons-logging', 'de.siegmar', 'it.unimi.dsi',
                  'net.sf.jopt-simple', 'org.apache.ant', 'org.apache.logging.log4j',
                  'org.apache.commons', 'org.apache.httpcomponents', 'org.apache.maven',
                  'org.checkerframework', 'org.codehaus.plexus', 'org.jdom',
                  'org.ow2.asm', 'org.slf4j', 'org.tukaani',
                  'org.vafer' ].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Forge'
            url = uri('https://maven.minecraftforge.net/')
            content {
                [ 'net.minecraftforge', 'net.minecraftforge.gradle', 'org.spongepowered' ].forEach{ includeGroup it }
            }
        }
        maven {
            name = 'ParchmentMC'
            url = uri('https://maven.parchmentmc.org')
            content {
                [ 'org.parchmentmc', 'org.parchmentmc.feather',
                  'org.parchmentmc.librarian.forgegradle' ].forEach { includeGroup it }
            }
        }
    }
    dependencies {
        classpath('com.github.johnrengelman:shadow:8.+')
        classpath('net.minecraftforge.gradle:net.minecraftforge.gradle.gradle.plugin:6.+')
        classpath('org.spongepowered:mixingradle:0.+')
        classpath('org.parchmentmc.librarian.forgegradle:org.parchmentmc.librarian.forgegradle.gradle.plugin:1.+')
    }
}

apply from: rootProject.file('gradle\\java8-module.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('net.minecraftforge.gradle')
plugins.apply('org.spongepowered.mixin')
plugins.apply('org.parchmentmc.librarian.forgegradle')

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    accessTransformer = file("src/main/resources/META-INF/${mod_accesstransformer}")
    runs {
        def args = [
                '-DtilDev=true'
        ]
        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")

    runtimeOnly(project(':api'))
}

mixin {
    add sourceSets.main, mod_refmap
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

processResources {
    from(project(':forge').processResources.outputs)
}

processTestResources {
    from(project(':forge').processTestResources.outputs)
}

jar {
    manifest {
        attributes([
                'FMLAT': mod_accesstransformer,
                'Implementation-Title': project.name,
                'MixinConfigs': mod_mixin,
                'TweakClass': mod_tweakclass,
                'TweakOrder': 0
        ])
    }
}

shadowJar {
    from(project(':forge').jar.archiveFile.collect { zipTree(it) })
}

tasks.assemble.dependsOn(shadowJar)
tasks.shadowJar.dependsOn('reobfJar')
tasks.jar.finalizedBy('reobfJar')
tasks.jar.dependsOn(':forge:build')