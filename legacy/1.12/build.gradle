import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream
import org.gradle.api.artifacts.transform.TransformParameters.None;

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
    id 'groovy'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(8))

minecraft {
    mappings channel: 'stable', version: mappings_version
    accessTransformer = file("src/main/resources/META-INF/${mod_accesstransformer}")
    runs {
        def args = [
                '-DtilDev=true',
                '-DtilClassPathMods=mods.thecomputerizer.theimpossiblelibrary.api.common.TILCommonEntryPoint;'+mod_entrypoint
        ]
        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
    }
}

def artifactType = Attribute.of('artifactType', String)
def java8ified = Attribute.of('java8ified', Boolean)
def jarExclusions = ['**/module-info.class']

configurations.runtimeClasspath {
    afterEvaluate {
        if(canBeResolved) {
            attributes.attribute(java8ified,true)
        }
    }
}

repositories {
    maven {
        name = 'CurseMaven'
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'BlameJared'
        url = uri('https://maven.blamejared.com')
        content {
            includeGroup 'net.darkhax.bookshelf'
            includeGroup 'net.darkhax.gamestages'
        }
    }
}

dependencies {
    attributesSchema {
        attribute(java8ified)
    }
    artifactTypes.getByName("jar") {
        attributes.attribute(java8ified,false)
    }
    registerTransform(ModuleInfoScrubber) {
        from.attribute(java8ified,false).attribute(artifactType,"jar")
        to.attribute(java8ified,true).attribute(artifactType,"jar")
    }

    //noinspection VulnerableLibrariesLocal
    minecraft("net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}")

    annotationProcessor("com.google.code.gson:gson:${project.gson_annotation}")
    annotationProcessor("com.google.guava:guava:${project.guava_annotation}")
    annotationProcessor("org.ow2.asm:asm-debug-all:${project.asm_debug_annotation}")

    implementation(project(':legacy'))

    //mod support & utility
    runtimeOnly(fg.deobf("net.darkhax.bookshelf:Bookshelf-${minecraft_version}:${bookshelf_version}"))
    runtimeOnly(fg.deobf("curse.maven:champions-307152:${champions_version}"))
    runtimeOnly(fg.deobf("curse.maven:coroutil-237749:${coroutil_version}"))
    runtimeOnly(fg.deobf("net.darkhax.gamestages:GameStages-${minecraft_version}:${gamestages_version}"))
    runtimeOnly(fg.deobf("curse.maven:hei-557549:${hei_version}"))
    runtimeOnly(fg.deobf("curse.maven:infernalmobs-227875:${infernal_version}"))
    runtimeOnly(fg.deobf("curse.maven:nyx-349214:${nyx_version}"))
    runtimeOnly(fg.deobf("curse.maven:resourcereloader-303876:${reloader_version}"))
    runtimeOnly(fg.deobf("curse.maven:sereneseasons-291874:${seasons_version}"))
    runtimeOnly(fg.deobf("curse.maven:top-245211:${top_version}"))
    runtimeOnly(fg.deobf("curse.maven:weather2-695602:${weather_version}"))
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    var replacements = [
            'minecraft_version': minecraft_version,
            'mod_author': mod_authors,
            'mod_description': mod_description,
            'mod_license': mod_license,
            'mod_id': mod_id,
            'mod_name': mod_name,
            'mod_version': version
    ]
    inputs.properties replacements
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand replacements
    }
    //exclude '**/theimpossiblelibrary/test/**'
}

jar {
    manifest {
        attributes([
                'FMLAT': mod_accesstransformer,
                'Implementation-Title': project.name,
                'TILMultiversionMods': mod_entrypoint
        ])
    }
}

tasks.register("scrubModuleInfo", Copy) {
    from(configurations.runtimeClasspath)
    into(layout.buildDirectory.dir("runtimeClasspath"))
}

tasks.named("compileJava",JavaCompile) {
    source(project(":api").sourceSets.main.allSource)
}

tasks.named("compileTestJava",JavaCompile) {
    source(project(":api").sourceSets.test.allJava)
}

tasks.withType(Javadoc).configureEach {
    source(project(":api").sourceSets.main.allJava)
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(project(":api").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).configureEach {
    from(project(":api").sourceSets.main.resources)
}

abstract class ModuleInfoScrubber implements TransformAction<None> {

    @InputArtifact
    abstract Provider<FileSystemLocation> getInputArtifact();

    @Override
    void transform(TransformOutputs outputs) {
        File input = getInputArtifact().get().getAsFile()
        println "Attempting to remove module-info files from artifact file `${input}`"
        if(input.name.endsWith(".jar")) {
            println "Recognized artifact file as jar! Opening..."
            outputs.file(runFileFilter(input));
        }
    }

    static File runFileFilter(File file) {
        def filteredEntries = []
        // Read the entries of the JAR file and filter out the ones to be excluded
        println "Attempting to open zip stream"
        file.withInputStream { inputStream ->
            def zipInputStream = new ZipInputStream(inputStream)
            println "Zip input stream successfully opened! Reading entries..."
            ZipEntry entry = zipInputStream.nextEntry
            while(entry) {
                if(!entry.getName().contains("module-info")) {
                    filteredEntries.add(entry)
                    println "Entry `${entry.getName()}` has been kept in the file"
                } else println "Entry `${entry.getName()}` has been removed from the file"
                entry = zipInputStream.nextEntry
            }
        }
        // Write the filtered entries back to the JAR file
        println "Attempting to rewrite the filtered entries back to `${file}`"
        file.withOutputStream { outputStream ->
            def zipOutputStream = new ZipOutputStream(outputStream)
            println "Zip output stream successfully opened! Writing entries..."
            filteredEntries.each { entry ->
                println "Writing entry `${entry.getName()}`"
                zipOutputStream.putNextEntry(entry)
                file.withInputStream { inputStream -> zipOutputStream<<inputStream }
                zipOutputStream.closeEntry()
            }
        }
    }
}