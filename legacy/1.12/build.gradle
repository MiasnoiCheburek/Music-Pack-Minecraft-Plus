plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

apply from: rootProject.file('shared-dependencies.gradle')

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

minecraft {
    mappings channel: 'stable', version: mappings_version
    accessTransformer = file("src\\main\\resources\\META-INF\\${mod_accesstransformer}")
    runs {
        def args = [
                '-DtilDev=true',
                '-DtilClassPathMods=mods.thecomputerizer.theimpossiblelibrary.api.common.TILCommonEntryPoint;'+mod_entrypoint
        ]
        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
    }
}

repositories {
    maven {
        name = 'CurseMaven'
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'BlameJared'
        url = uri('https://maven.blamejared.com')
        content {
            includeGroup 'net.darkhax.bookshelf'
            includeGroup 'net.darkhax.gamestages'
        }
    }
}

dependencies {
    println 'Hello from 1.12.2'

    //noinspection VulnerableLibrariesLocal
    minecraft("net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}")

    implementation(project(':legacy'))

    //mod support & utility
    //runtimeOnly(fg.deobf("net.darkhax.bookshelf:Bookshelf-${minecraft_version}:${bookshelf_version}"))
    //runtimeOnly(fg.deobf("curse.maven:champions-307152:${champions_version}"))
    //runtimeOnly(fg.deobf("curse.maven:coroutil-237749:${coroutil_version}"))
    //runtimeOnly(fg.deobf("net.darkhax.gamestages:GameStages-${minecraft_version}:${gamestages_version}"))
    //runtimeOnly(fg.deobf("curse.maven:hei-557549:${hei_version}"))
    //runtimeOnly(fg.deobf("curse.maven:infernalmobs-227875:${infernal_version}"))
    //runtimeOnly(fg.deobf("curse.maven:nyx-349214:${nyx_version}"))
    //runtimeOnly(fg.deobf("curse.maven:resourcereloader-303876:${reloader_version}"))
    //runtimeOnly(fg.deobf("curse.maven:sereneseasons-291874:${seasons_version}"))
    //runtimeOnly(fg.deobf("curse.maven:top-245211:${top_version}"))
    //runtimeOnly(fg.deobf("curse.maven:weather2-695602:${weather_version}"))
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    var replacements = [
            'minecraft_version': minecraft_version,
            'mod_author': mod_authors,
            'mod_description': mod_description,
            'mod_license': mod_license,
            'mod_id': mod_id,
            'mod_name': mod_name,
            'mod_version': version
    ]
    inputs.properties replacements
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand replacements
    }
    //exclude '**/theimpossiblelibrary/test/**'
}

jar {
    manifest {
        attributes([
                'FMLAT': mod_accesstransformer,
                'Implementation-Title': project.name,
                'TILMultiversionMods': mod_entrypoint
        ])
    }
}

tasks.named("compileJava",JavaCompile) {
    source(project(":api").sourceSets.main.allSource)
}

tasks.named("compileTestJava",JavaCompile) {
    source(project(":api").sourceSets.test.allJava)
}

tasks.withType(Javadoc).configureEach {
    source(project(":api").sourceSets.main.allJava)
}

tasks.withType(Jar).configureEach {
    from(project(":api").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).configureEach {
    from(project(":api").sourceSets.main.resources)
}